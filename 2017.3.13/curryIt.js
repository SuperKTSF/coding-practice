/*已知 fn 为一个预定义函数，实现函数 curryIt，调用之后满足如下条件：
1、返回一个函数 a，a 的 length 属性值为 1（即显式声明 a 接收一个参数）
2、调用 a 之后，返回一个函数 b, b 的 length 属性值为 1
3、调用 b 之后，返回一个函数 c, c 的 length 属性值为 1
4、调用 c 之后，返回的结果与调用 fn 的返回值一致
5、fn 的参数依次为函数 a, b, c 的调用参数 */
function curryIt(fn) {
    /*这种方法有一个很严重的问题，就是如果每次返回的函数过多，比如100次，总不能写100个return语句吧
    return function (arg1){
        return function (arg2){
            return function(arg3){
                return fn.call(null,arg1,arg2,arg3);
            };
        };
    };*/
    //这个方法的好处在于递归的使用，代码简洁，而且没有使用arguments.callee
    var args = [];
    var length = fn.length;//fn期望得到的参数
    var result = function(arg){
        args.push(arg);
        length--;
        if(length<=0){
            return fn.apply(null,args);
        }else{
            return result;
        }
    }
    return result;
    
    

}